// <auto-generated />
using System;
using FindJobAPI.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace FindJobAPI.Data.FindJobAPI_DB
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.20")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("FindJobAPI.Model.Domain.account", b =>
                {
                    b.Property<string>("UID")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UID");

                    b.ToTable("Account");
                });

            modelBuilder.Entity("FindJobAPI.Model.Domain.employer", b =>
                {
                    b.Property<string>("UID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("contact_phone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("employer_about")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("employer_address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("employer_image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("employer_image_cover")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("employer_name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("employer_website")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UID");

                    b.ToTable("Employer");
                });

            modelBuilder.Entity("FindJobAPI.Model.Domain.industry", b =>
                {
                    b.Property<int>("industry_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("industry_id"), 1L, 1);

                    b.Property<string>("industry_name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("industry_id");

                    b.ToTable("Industry");
                });

            modelBuilder.Entity("FindJobAPI.Model.Domain.job", b =>
                {
                    b.Property<int>("job_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("job_id"), 1L, 1);

                    b.Property<string>("UID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("deadline")
                        .HasColumnType("datetime2");

                    b.Property<int>("industry_id")
                        .HasColumnType("int");

                    b.Property<string>("job_description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("job_title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("location")
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("maximum_salary")
                        .HasColumnType("real");

                    b.Property<float>("minimum_salary")
                        .HasColumnType("real");

                    b.Property<DateTime>("posted_date")
                        .HasColumnType("datetime2");

                    b.Property<string>("requirement")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("status")
                        .HasColumnType("bit");

                    b.Property<int>("type_id")
                        .HasColumnType("int");

                    b.HasKey("job_id");

                    b.HasIndex("UID");

                    b.HasIndex("industry_id");

                    b.HasIndex("type_id");

                    b.ToTable("Job");
                });

            modelBuilder.Entity("FindJobAPI.Model.Domain.recruitment", b =>
                {
                    b.Property<string>("UID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("job_id")
                        .HasColumnType("int");

                    b.Property<DateTime>("registation_date")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("status")
                        .HasColumnType("bit");

                    b.HasKey("UID", "job_id");

                    b.HasIndex("job_id");

                    b.ToTable("Recruitment");
                });

            modelBuilder.Entity("FindJobAPI.Model.Domain.recruitment_no_account", b =>
                {
                    b.Property<int>("recruitment_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("recruitment_ID"), 1L, 1);

                    b.Property<string>("address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("birthday")
                        .HasColumnType("datetime2");

                    b.Property<string>("education")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("experience")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("fullname")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("job_id")
                        .HasColumnType("int");

                    b.Property<string>("major")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("phone_number")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("registration_date")
                        .HasColumnType("datetime2");

                    b.Property<string>("skills")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("status")
                        .HasColumnType("bit");

                    b.HasKey("recruitment_ID");

                    b.HasIndex("job_id");

                    b.ToTable("Recruitment_No_Accounts");
                });

            modelBuilder.Entity("FindJobAPI.Model.Domain.seeker", b =>
                {
                    b.Property<string>("UID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("birthday")
                        .HasColumnType("datetime2");

                    b.Property<string>("education")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("experience")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("major")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("skills")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UID");

                    b.ToTable("Seeker");
                });

            modelBuilder.Entity("FindJobAPI.Model.Domain.type", b =>
                {
                    b.Property<int>("type_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("type_id"), 1L, 1);

                    b.Property<string>("type_name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("type_id");

                    b.ToTable("Type");
                });

            modelBuilder.Entity("FindJobAPI.Model.Domain.employer", b =>
                {
                    b.HasOne("FindJobAPI.Model.Domain.account", "account")
                        .WithMany("employers")
                        .HasForeignKey("UID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("account");
                });

            modelBuilder.Entity("FindJobAPI.Model.Domain.job", b =>
                {
                    b.HasOne("FindJobAPI.Model.Domain.employer", "employer")
                        .WithMany("jobs")
                        .HasForeignKey("UID");

                    b.HasOne("FindJobAPI.Model.Domain.industry", "industry")
                        .WithMany("job")
                        .HasForeignKey("industry_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FindJobAPI.Model.Domain.type", "type")
                        .WithMany("jobs")
                        .HasForeignKey("type_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("employer");

                    b.Navigation("industry");

                    b.Navigation("type");
                });

            modelBuilder.Entity("FindJobAPI.Model.Domain.recruitment", b =>
                {
                    b.HasOne("FindJobAPI.Model.Domain.seeker", "seeker")
                        .WithMany("recruitments")
                        .HasForeignKey("UID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FindJobAPI.Model.Domain.job", "job")
                        .WithMany("recruitment")
                        .HasForeignKey("job_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("job");

                    b.Navigation("seeker");
                });

            modelBuilder.Entity("FindJobAPI.Model.Domain.recruitment_no_account", b =>
                {
                    b.HasOne("FindJobAPI.Model.Domain.job", "job")
                        .WithMany("recruitment_no_account")
                        .HasForeignKey("job_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("job");
                });

            modelBuilder.Entity("FindJobAPI.Model.Domain.seeker", b =>
                {
                    b.HasOne("FindJobAPI.Model.Domain.account", "account")
                        .WithMany("seekers")
                        .HasForeignKey("UID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("account");
                });

            modelBuilder.Entity("FindJobAPI.Model.Domain.account", b =>
                {
                    b.Navigation("employers");

                    b.Navigation("seekers");
                });

            modelBuilder.Entity("FindJobAPI.Model.Domain.employer", b =>
                {
                    b.Navigation("jobs");
                });

            modelBuilder.Entity("FindJobAPI.Model.Domain.industry", b =>
                {
                    b.Navigation("job");
                });

            modelBuilder.Entity("FindJobAPI.Model.Domain.job", b =>
                {
                    b.Navigation("recruitment");

                    b.Navigation("recruitment_no_account");
                });

            modelBuilder.Entity("FindJobAPI.Model.Domain.seeker", b =>
                {
                    b.Navigation("recruitments");
                });

            modelBuilder.Entity("FindJobAPI.Model.Domain.type", b =>
                {
                    b.Navigation("jobs");
                });
#pragma warning restore 612, 618
        }
    }
}
